#!/usr/bin/env python
# -*- coding: ascii -*-

"""
Algorithm to mine disjunctive frequent itemsets

  This algorithm differs from the conjunctive itemset mining algorithms
  in the sense that it mines ORed itemsets instead of ANDed itemsets.

  The algorithm makes use of FPTree to store the dataset in a condensed form.

  Steps carried out by this algorithms are as follows:
  (Step 1)   Read the original dataset and create a new dataset with items
          mapped to a unique integer i.e. map each item to a unique integer ID.
          This step will be termed as preprocessing.

  (Step 2)   Scan the new dataset and calculate the frequency of each item present
          in the dataset.

  (Step 3)    We scan the dataset one more time to build an FPTree using the
          the frequencies of the items

  (Step 4)    We next traverse the itemset lattice in the top down order i.e.
          enumerating the lattice from items with higher cardinality to items
          with less cardinality.

  (Step 5)    For each such itemset, check if the itemset is a subset of any
          maximal infrequent itemset:
          - if NO: Use the FP Tree Property to find the support of the itemset.

  (Step 6)    If the itemset has support value greater than the min support
          threshold, then we add the itemset to the frequent itemset list,
          along with its support value.

  (Step 7)    Step 4 to 6 are repeated for all itemsets in the itemset lattice.
          The algorithm stops when all itemsets have been processed. The resultant
          list of frequent itemsets form the list of disjunctive frequent itemsets
          generated by our algorithm.

"""

__author__ = 'Nihal Jain (nihal.jain@iitg.ernet.in)'
__version__ = '0.1'
__date__ = '20160810'


#
## Code goes here.
#

def test():
    """ Testing Docstring"""
    pass

if __name__=='__main__':
    test()
